VARIABLE 0 1 2 ───  borne sup (non incluse)
         │ └─── nom arg
      nom var

           ┌─ var1
CONSTRAINT 0 2 ── var2

F 0 0 7 ── coût
  │ └── value var 2
  └─ value var 1

# ---------------------------------------------------------------------------- #
3. Fire-Fighting problem

Deux manières de voir les choses
    
  agent ⇐⇒  pompier                │ agent ⇐⇒  batiment x pompier
                                   │
    domaine de def                 │   domaine de def = agents présents ou non
      = numéro du batiment choisi  │      x₁₁ = batiment 1, pompier 1 présent
                                   │


Soit utiliser des NOGOOD, soit imposer un coût très élevé

 ┌──────┐   ┌──────┐   ┌──────┐   ┌──────┐
 │ bat1 │   │ bat2 │   │ bat3 │   │ bat4 │
 └─────┬┘   └┬────┬┘   └┬────┬┘   └┬─────┘
       └──┬──┘    └──┬──┘    └──┬──┘
       agent1      agent1     agent1


ça optimise pas
>> en version 4 batiments, on a un score de 10 (on évite les 100 mais on reste
    pas opti)
>> test avec la version simple (gauche-droite, 0/1)
    on obtient un cout de 5 (0 1 0) = (a1 __ a2+a3 __), c'est opti !
>> MAIS en mettant un cout légèrement plus élevé sur a2 et a3 en même temps,
    a2 + a3 : cout 2
    a1 + a2 : cout 0
    Il ne trouve pas l'opti (5) et nous sort quand même 7.


